/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'java-library-distribution'


sourceCompatibility=1.7
targetCompatibility=1.7
version="1.0.0"

// This section declares where to dependencies of the project are found
repositories {
	// use the official hortonworks repo first.
    maven {
        url 'http://repo.hortonworks.com/content/repositories/releases/'
    }
    maven {
        url 'http://conjars.org/repo'
    }
    jcenter()
}

/*
 * We add an sshAntTask in order to copy the resulting tool via scp to our Hortonworks sandbox
 */
configurations {
    sshAntTask
}

/* The internal hortonworks repository contains a certain version of jetty which contains a bug fix that was not really published.
 * This section replaces the version of Jetty to the one without the bugfix.
 *
 * Note that this introduces a vulnerability, whose effect I don't know...
 */ 
configurations.all {
  resolutionStrategy {
    forcedModules = ['org.mortbay.jetty:jetty:6.1.26']
  }
}

ext.cascadingVersion = "3.0.4+"
ext.tezVersion = "0.7.0+"
ext.hadoopVersion = "2.7.1+"
ext.targetDir = "root:bcsroot@vbcspc57:/root/cascading-jdbc-on-hdp"

dependencies {
	/*
	 * Add all necessary cascading libraries 
	 */
	implementation (group: 'cascading', name: 'cascading-core', version: cascadingVersion)
	implementation (group: 'cascading', name: 'cascading-local', version: cascadingVersion)
	implementation (group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion)
	implementation (group: 'cascading', name: 'cascading-hadoop2-tez', version: cascadingVersion)
	// and add the postgresql JDBC connector
	implementation 'cascading:cascading-jdbc-postgresql:3.0.0-wip-129'

	// Hortonworks gets shipped with these libraries.
	// Thus we only need them during compile time ...
	compileOnly (group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion)
	compileOnly (group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-core', version: hadoopVersion)
	compileOnly (group: 'org.apache.tez', name: 'tez-dag', version: tezVersion)
	compileOnly (group: 'org.apache.tez', name: 'tez-mapreduce', version: tezVersion)

	// for copying via scp, we need additional libraries	
	sshAntTask 'org.apache.ant:ant-jsch:1.7.1', 'jsch:jsch:0.1.29'
		
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

/*
 * define the scp task via an ant-taskdef
 */
ant.taskdef(
  name: 'scp',
  classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
  classpath: configurations.sshAntTask.asPath)

// see https://docs.gradle.org/3.4.1/userguide/java_library_plugin.html#sec:java_library_configurations_graph
task copyAllDependencies(type: Copy) {
  //referring to the 'runtimeClasspath' configuration
  from configurations.runtimeClasspath
  into 'build/libs/libs' // TODO: the path is not really convenient, but sufficient, because this is an example project ...
}


task uploadToHortonworksSandbox(dependsOn: [copyAllDependencies, assemble]) {
  doLast  {
    ant.scp(
      todir: targetDir,
      verbose: 'true'
	) {
		fileset(dir: 'build/libs') {
//            include(name: '**/**')
	    }
	  }
  }
}

/*
 * include all runtime libraries in the classpath
 */
jar {
  manifest {
    attributes(
      "Class-Path": configurations.runtimeClasspath.collect { "libs/$it.name" }.join(' '))
  }
}

